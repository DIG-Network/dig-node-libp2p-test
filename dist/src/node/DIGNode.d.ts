import type { Libp2p } from 'libp2p';
import { DIGNodeConfig } from './types';
export declare class DIGNode {
    private config;
    private node;
    private digFiles;
    private digPath;
    private cryptoIPv6;
    private watcher;
    private syncInterval;
    private discoveredPeers;
    private peerStores;
    private syncInProgress;
    private isStarted;
    private logger;
    private startTime;
    private globalDiscovery;
    private webSocketRelay;
    private requestCounts;
    private readonly MAX_REQUESTS_PER_MINUTE;
    private metrics;
    constructor(config?: DIGNodeConfig);
    private getBootstrapServerHost;
    start(): Promise<void>;
    stop(): Promise<void>;
    private cleanup;
    private validateConfig;
    private validateStoreId;
    private sanitizeFilePath;
    getMetrics(): any;
    getStatus(): any;
    private scanDIGFiles;
    private loadDIGFile;
    private isRateLimited;
    private handleDIGRequest;
    private serveFileFromURN;
    private serveFileFromStore;
    private handleDiscoveryRequest;
    private announceStores;
    private announceStore;
    getAvailableStores(): string[];
    hasStore(storeId: string): boolean;
    getCryptoIPv6(): string;
    getNode(): Libp2p;
    rescanDIGFiles(): Promise<void>;
    isHealthy(): boolean;
    getNetworkHealth(): any;
    findStorePeers(storeId: string): Promise<any[]>;
    private startFileWatcher;
    private runFileWatcher;
    private handleFileSystemEvent;
    private addOrUpdateStore;
    private removeStore;
    private startPeerDiscovery;
    private startStoreSync;
    private discoverPeerStores;
    private syncStores;
    private downloadStoreFromPeers;
    private startGlobalDiscovery;
    private startWebSocketRelay;
    private connectToDiscoveredPeers;
    private connectToConfiguredPeers;
    connectToPeer(peerAddress: string): Promise<void>;
    getConnectionInfo(): any;
    forceConnectToPeers(): Promise<void>;
    private connectViaRelay;
    private initiateRelayConnection;
    private handleRelayOffer;
    discoverAllPeers(): Promise<void>;
}
