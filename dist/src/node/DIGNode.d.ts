import { DIGNodeConfig, NodeCapabilities } from './types.js';
export declare class DIGNode {
    private config;
    private node;
    private digFiles;
    private digPath;
    private cryptoIPv6;
    private watcher;
    private syncInterval;
    private discoveredPeers;
    private peerStores;
    private syncInProgress;
    private isStarted;
    private logger;
    private startTime;
    private globalDiscovery;
    private webSocketRelay;
    private e2eEncryption;
    private zkPrivacy;
    private peerProtocolVersions;
    private nodeCapabilities;
    private requestCounts;
    private app;
    private httpServer;
    private io;
    private registeredPeers;
    private relayConnections;
    private turnServers;
    private cleanupInterval;
    private readonly MAX_REQUESTS_PER_MINUTE;
    private readonly PEER_TIMEOUT;
    private privacyOverlayPeers;
    private gossipTopics;
    private metrics;
    constructor(config?: DIGNodeConfig);
    private ensureDigDirectory;
    private detectEnvironment;
    private safeServiceInit;
    getCapabilities(): NodeCapabilities;
    private addOptionalService;
    private getBootstrapServerHost;
    private createCircuitRelayAddress;
    start(): Promise<void>;
    stop(): Promise<void>;
    private cleanup;
    private validateConfig;
    private validateStoreId;
    private sanitizeFilePath;
    getMetrics(): any;
    getStatus(): any;
    private setupBuiltInBootstrapServer;
    private startBuiltInBootstrapServer;
    private getBootstrapPort;
    private resolveCryptoIPv6Address;
    private enforceEncryptionPolicy;
    private validateMandatoryEncryption;
    private rejectUnencryptedConnection;
    private verifyOutgoingEncryption;
    private createHandshakeInfo;
    private getNodeTypeDescription;
    private getNodeTypeFromCode;
    private startDistributedPrivacyDiscovery;
    private handleGossipMessage;
    private handlePeerDiscoveryGossip;
    private handleAddressExchangeGossip;
    private handleStoreAnnouncementGossip;
    private handleCapabilityAnnouncementGossip;
    private announceToPrivacyOverlay;
    private storeAddressInDHT;
    private resolveDistributedPeerAddresses;
    private handlePeerExchangeRequest;
    private handlePrivacyPeerDiscoveryRequest;
    requestPeersFromNode(peerId: string, privacyMode?: boolean): Promise<any[]>;
}
